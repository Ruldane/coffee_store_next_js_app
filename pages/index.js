import { useEffect, useState, useContext } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Banner from "../components/banner";
import Card from "../components/card";
import { styled } from "@mui/system";

import coffeeStoresData from "../data/coffee-stores.json";
import { fetchCoffeeStore } from "../lib/coffee-stores";
import useTrackLocation from "../hooks/use-track-location";
import { Typography } from "@mui/material";

import { ACTION_TYPES, StoreContext } from "../store/store-context";

// will pre-render static props (props who will never change)
// getStaticProps will never be excecuted on client
export async function getStaticProps(context) {
  const coffeStores = await fetchCoffeeStore();

  return {
    props: {
      coffees: coffeStores,
    }, // will be passed to the page component as props
  };
}

export default function Home({ coffees }) {
  //const [coffeeStores, setCoffeeStores] = useState("");
  const [CoffeeStoreErrors, setCoffeeStoreErrors] = useState(null);

  const { dispatch, state } = useContext(StoreContext);
  const { coffeeStores, latLong } = state;

  const { handleTrackLocation, locationErrorMsg, isFindLocation } =
    useTrackLocation();

  useEffect(() => {
    if (latLong) {
      try {
        const fetchCoffees = async () => {
          const response = await fetch(
            `/api/getCoffeeStoresByLocation?latLong=${latLong}`
          );

          const coffeeStores = await response.json();
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {
              coffeeStores,
            },
          });
          setCoffeeStoreErrors("");
          //setCoffeeStores(fetchedCoffeeStores);
        };
        // call the function
        fetchCoffees();
      } catch (e) {
        setCoffeeStoreErrors(e.message);
        console.error(e);
      }
    }
  }, [dispatch, latLong]);

  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  };

  const StyledMain = styled("main")(({ theme }) => ({
    marginTop: "2.5rem",
    marginLeft: "auto",
    marginRight: "auto",
    maxWidth: "72rem",
    paddingLeft: "auto ",
    paddingRight: "auto",
    [theme.breakpoints.up("md")]: {
      marginTop: "3rem",
      paddingLeft: "1rem ",
      paddingRight: "1rem",
    },
    [theme.breakpoints.up("lg")]: {
      marginTop: "5rem",
      paddingLeft: "2rem ",
      paddingRight: "2rem",
    },
  }));

  return (
    <div>
      <Head>
        <title>Coffee Cannoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledMain>
        <Banner
          buttonText={isFindLocation ? "Locating..." : "View stor es nearby"}
          handleOnClick={handleOnBannerBtnClick}
        />
        {locationErrorMsg ? (
          <Typography variant="body2">
            `Something went wrong: locationErrorMsg
          </Typography>
        ) : undefined}

        {CoffeeStoreErrors ? (
          <Typography variant="body2">
            Something went wrong: CoffeeStoreErrors
          </Typography>
        ) : undefined}

        {coffeeStores?.length > 0 && (
          <>
            <h1 className={styles.heading2}>Store near me</h1>
            <div className={styles.cardLayout}>
              {coffeeStores.map((cofeeStore, i) => {
                return (
                  <Card
                    key={i}
                    name={cofeeStore.name}
                    imgUrl={cofeeStore.imgUrl}
                    href={`/coffee-store/${cofeeStore.fsq_id}`}
                    className={styles.card}
                  />
                );
              })}
            </div>
            <div className={styles.heroImage}>
              <Image
                src="/static/hero-image.png"
                alt="hero image"
                width={700}
                height={400}
              />
            </div>
          </>
        )}

        {coffees?.length > 0 && (
          <>
            <h1 className={styles.heading2}>Strasbourg Coffee</h1>
            <div className={styles.cardLayout}>
              {coffees.map((cofeeStore, i) => {
                return (
                  <Card
                    key={i}
                    name={cofeeStore.name}
                    imgUrl={cofeeStore.imgUrl}
                    href={`/coffee-store/${cofeeStore.fsq_id}`}
                    className={styles.card}
                  />
                );
              })}
            </div>
            <div className={styles.heroImage}>
              <Image
                src="/static/hero-image.png"
                alt="hero image"
                width={700}
                height={400}
              />
            </div>
          </>
        )}
      </StyledMain>
      <footer className={styles.footer}></footer>
    </div>
  );
}
